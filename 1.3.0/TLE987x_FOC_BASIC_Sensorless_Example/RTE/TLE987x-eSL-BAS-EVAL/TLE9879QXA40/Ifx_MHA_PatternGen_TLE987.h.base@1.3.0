/*
 * Copyright (c) 2022 Infineon Technologies AG. All Rights Reserved.
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG, its affiliates or its licensees. If and as long as no
 * such terms of use are agreed, use of this file is subject to the Evaluation Software License Agreement distributed
 * along with this file within the software delivery package.
 *
 */

/**
 * \file Ifx_MHA_PatternGen_TLE987.h
 * \brief A specialized  pattern generator module for TLE987x devices.
 * This module sets the compare values needed by the hardware module that drives the switches of the bridge driver, as
 * well as the compare value needed by the hardware module to trigger a current measurement (compare values are mainly
 * calculated by the modulator). It sets the modulation frequency and the deadtime of the system. In addition to that,
 * it can be configured to react on a trap fault.
 */

#ifndef IFX_MHA_PATTERNGEN_TLE987_H
#define IFX_MHA_PATTERNGEN_TLE987_H

#include "Ifx_ComponentID.h"
#include "Ifx_ComponentVersion.h"
#include "Ifx_MHA_PatternGen.h"
#include "ccu6.h"

/**
 * Macro for dead time conversion from nano second to micro second
 */
#define IFX_MHA_PATTERNGEN_TLE987_NANO_TO_MICRO (1000)

/**
 * Macro for converting frequency from MHz to kHz
 */
#define IFX_MHA_PATTERNGEN_TLE987_MHZ_TO_KHZ    (1000)

/**
 * Pattern generator state options
 */
typedef enum Ifx_MHA_PatternGen_TLE987_State
{
    Ifx_MHA_PatternGen_TLE987_State_init  = 0, /**<Pattern generator is initialized.*/
    Ifx_MHA_PatternGen_TLE987_State_off   = 1, /**<Pattern generator is disabled.*/
    Ifx_MHA_PatternGen_TLE987_State_on    = 2, /**<Pattern generator is enabled.*/
    Ifx_MHA_PatternGen_TLE987_State_fault = 3  /**<Pattern generator is in fault.*/
} Ifx_MHA_PatternGen_TLE987_State;

/**
 * Status of the pattern generator, containing the bit coded errors and the state machine state
 */
typedef struct Ifx_MHA_PatternGen_TLE987_Status
{
    /**
     * Status of the pattern generator
     */
    Ifx_MHA_PatternGen_TLE987_State state;

    /**
     * TRAP status flag
     */
    bool trap;
} Ifx_MHA_PatternGen_TLE987_Status;

/**
 * \brief Data structure that stores all data of module instance.
 *
 */
typedef struct Ifx_MHA_PatternGen_TLE987
{
    /**
     * Structure inherited from Ifx_MHA_PatternGen
     */
    Ifx_MHA_PatternGen _Super_Ifx_MHA_PatternGen;

    /**
     * Array to store the compare values
     */
    uint16 p_compareValues_tick[6];

    /**
     * Array to store the compare shadow values
     */
    uint16 p_compareValuesShadow_tick[6];

    /**
     * Array to store the trigger times values
     */
    uint16 p_triggerTime_tick[2];

    /**
     * Array to store the shadow trigger times values
     */
    uint16 p_triggerTimeShadow_tick[2];

    /**
     * Status of the pattern generator, containing the bit coded errors and the state machine state
     */
    Ifx_MHA_PatternGen_TLE987_Status p_status;

    /**
     * Counter of the current control cycles
     */
    uint8 p_cycleCounter;

    /**
     * Flags that the pattern generator execute function has finished its execution
     */
    bool p_executed;
} Ifx_MHA_PatternGen_TLE987;

/**
 *  \brief Handles the state machine of the module.
 *
 *  This API handles the state machine of the module. Additionally, it takes the compare values and the triggers in
 * ticks generated by another block (e.g. space vector modulation) and writes these values to the corresponding hardware
 * configuration registers.
 *
 *  Inputs of this API:
 *  <ul>
 *      <li>Status bit of the Trap fault of the pattern generator interrupt status register. The fault is considered by
 * fault detection only if it is configured for FAULT_REPORT_REACT</li>
 *  </ul>
 *  <ul>
 *      <li>State machine "Enable" input, boolean data that is Enabled/Disabled by a call to the
 * Ifx_PatternGen_TLE987_enable(true/false)</li>
 *  </ul>
 *
 *  Outputs of this API:
 *  <ul>
 *      <li>State variable: encoded on the "Status" output</li>
 *  </ul>
 *  <ul>
 *      <li>Error code: encoded on the "Status" output</li>
 *  </ul>
 *
 *  These outputs are set corresponding to the states and state transitions design. A fault, if it is not disabled, will
 * be detected and the configured action will be taken within 3 calls to this function.
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *  \param [in] compareValues[6] Compare values for the switches: first three up count, second three down count
 *  \param [in] triggerTime_tick[2] Array of first and second time trigger, in clock ticks
 *
 */
void Ifx_MHA_PatternGen_TLE987_execute(Ifx_MHA_PatternGen_TLE987* self, uint16 compareValues[6], uint16
                                       triggerTime_tick[2]);

/**
 *  \brief Initializes the pattern generator software module.
 *
 *  The peripheral initialization should be done by the user before calling this function.
 *  The timer has to be started by the user before the first call to the module execute function.
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 */
void Ifx_MHA_PatternGen_TLE987_init(Ifx_MHA_PatternGen_TLE987* self);

/**
 *  \brief This function has to be called on the one match interrupt by the library user.
 *
 *  This will update the timer compare values and trigger times for the second half of the PWM cycle.
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 */
void Ifx_MHA_PatternGen_TLE987_onOneMatch(Ifx_MHA_PatternGen_TLE987* self);

/**
 *  \brief This function has to be called in the period match interrupt by the library user.
 *
 *  This will update the timer compare values and trigger times for the first half of the PWM cycle.
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 */
void Ifx_MHA_PatternGen_TLE987_onPeriodMatch(Ifx_MHA_PatternGen_TLE987* self);

/**
 *  \brief Reset the variables used to count the number of execution cycles.
 *
 *  Used to synchronize the current control loop with the Pattern Generator execution.
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 */
static inline void Ifx_MHA_PatternGen_TLE987_reset(Ifx_MHA_PatternGen_TLE987* self)
{
    self->p_cycleCounter = 0;
    self->p_executed     = false;
}


/**
 *  \brief Get the status of the pattern generator.
 *
 *  The status variable contains the bit coded errors and the state machine state.
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 *  \return Pattern generator status
 */
static inline Ifx_MHA_PatternGen_TLE987_Status Ifx_MHA_PatternGen_TLE987_getStatus(Ifx_MHA_PatternGen_TLE987* self)
{
    return self->p_status;
}


/**
 *  \brief Set the module dead time value.
 *
 *  This function sets the dead time between 0 and \f$255*(\frac{1}{T12_{CLK}})*2\f$ with a resolution of
 * \f$(\frac{1}{T12_{CLK}})*2\f$. This setting is limited by the configured minimum dead time.
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *  \param [in] deadTime_ns Dead time value, in nanoseconds
 *
 *  <table>
 *      <caption>Parameter Representation</caption>
 *          <tr>
 *              <th>Name</th>
 *              <th>Attribute</th>
 *              <th>Value</th>
 *          </tr>
 *          <tr>
 *              <td rowspan="6">setDeadTime_ns</td>
 *              <td>Fractional bits</td>
 *              <td>0</td>
 *          </tr>
 *          <tr>
 *              <td>Gain</td>
 *              <td>1.0E-9</td>
 *          </tr>
 *          <tr>
 *              <td>Offset</td>
 *              <td>0</td>
 *          </tr>
 *          <tr>
 *              <td>Accuracy</td>
 *              <td>-</td>
 *          </tr>
 *          <tr>
 *              <td>Range</td>
 *              <td>[0, 4294967295]</td>
 *          </tr>
 *          <tr>
 *              <td>Unit</td>
 *              <td>s</td>
 *          </tr>
 *  </table>
 *
 */
static inline void Ifx_MHA_PatternGen_TLE987_setDeadTime_ns(Ifx_MHA_PatternGen_TLE987* self, uint32 deadTime_ns)
{
    /* Local variables for dead time ticks and dead time */
    uint32 deadTimeSet_tick;
    uint32 newDeadtime;

    /* Check if input dead time is less than the minimum dead time */
    if (deadTime_ns < self->_Super_Ifx_MHA_PatternGen.p_deadTimeMin_ns)
    {
        newDeadtime = self->_Super_Ifx_MHA_PatternGen.p_deadTimeMin_ns;
    }
    else
    {
        newDeadtime = deadTime_ns;
    }

    /* Conversion of dead time into dead time ticks for center aligned mode */
    deadTimeSet_tick = ((newDeadtime) * CCU6_T12_CLK) / (IFX_MHA_PATTERNGEN_TLE987_NANO_TO_MICRO);

    /* Setting up dead time in ticks using CCU6 function */
    CCU6_Deadtime_Set((uint16)deadTimeSet_tick);
}


/**
 *  \brief Get the pattern generator dead time value in nanoseconds.
 *
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 *  \return Dead time value, in nanoseconds
 *  <table>
 *      <caption>Parameter Representation</caption>
 *          <tr>
 *              <th>Name</th>
 *              <th>Attribute</th>
 *              <th>Value</th>
 *          </tr>
 *          <tr>
 *              <td rowspan="6">getDeadTime_ns</td>
 *              <td>Fractional bits</td>
 *              <td>0</td>
 *          </tr>
 *          <tr>
 *              <td>Gain</td>
 *              <td>1.0E-9</td>
 *          </tr>
 *          <tr>
 *              <td>Offset</td>
 *              <td>0</td>
 *          </tr>
 *          <tr>
 *              <td>Accuracy</td>
 *              <td>-</td>
 *          </tr>
 *          <tr>
 *              <td>Range</td>
 *              <td>[0, 4294967295]</td>
 *          </tr>
 *          <tr>
 *              <td>Unit</td>
 *              <td>s</td>
 *          </tr>
 *  </table>
 *
 */
static inline uint32 Ifx_MHA_PatternGen_TLE987_getDeadTime_ns(Ifx_MHA_PatternGen_TLE987* self)
{
    /* Local variable for dead time*/
    uint32 deadTimeGet;

    /* Conversion of dead time ticks into dead time for center align mode */
    deadTimeGet = ((uint32)CCU6_Deadtime_Get() * IFX_MHA_PATTERNGEN_TLE987_NANO_TO_MICRO);
    deadTimeGet = deadTimeGet / (CCU6_T12_CLK);

    return deadTimeGet;
}


/**
 *  \brief Set the pattern generator frequency in kHz.
 *
 *  This function sets the pattern generator frequency in between 1kHz and 40kHz with a resolution of 1kHz.
 *  Changes to the switching frequency will only be applied during 'off' state. During every other state, a setting of
 * this dynamic configuration will be ignored!
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *  \param [in] frequency_kHz Frequency in kHz
 *
 *  <table>
 *      <caption>Parameter Representation</caption>
 *          <tr>
 *              <th>Name</th>
 *              <th>Attribute</th>
 *              <th>Value</th>
 *          </tr>
 *          <tr>
 *              <td rowspan="6">setFrequency_kHz</td>
 *              <td>Fractional bits</td>
 *              <td>0</td>
 *          </tr>
 *          <tr>
 *              <td>Gain</td>
 *              <td>1000</td>
 *          </tr>
 *          <tr>
 *              <td>Offset</td>
 *              <td>0</td>
 *          </tr>
 *          <tr>
 *              <td>Accuracy</td>
 *              <td>-</td>
 *          </tr>
 *          <tr>
 *              <td>Range</td>
 *              <td>[0, 4294967295]</td>
 *          </tr>
 *          <tr>
 *              <td>Unit</td>
 *              <td>Hz</td>
 *          </tr>
 *  </table>
 *
 */
static inline void Ifx_MHA_PatternGen_TLE987_setFrequency_kHz(Ifx_MHA_PatternGen_TLE987* self, uint32 frequency_kHz)
{
    /* Local variables for frequency and period ticks */
    uint32 frequencyTemp;
    uint32 period_tick;

    if ((Ifx_MHA_PatternGen_TLE987_State)self->p_status.state == Ifx_MHA_PatternGen_TLE987_State_off)
    {
        frequencyTemp = frequency_kHz;

        /* Check if frequency is greater than 40kHz */
        if (frequencyTemp > 40)
        {
            frequencyTemp = 40;
        }

        /* Conversion of frequency into period ticks for center align mode */
        period_tick = ((CCU6_T12_CLK * IFX_MHA_PATTERNGEN_TLE987_MHZ_TO_KHZ) / (frequencyTemp));
        period_tick = (period_tick / (2)) - 1;

        /* Setting up period ticks using CCU6 function */
        CCU6_T12_Period_Value_Set((uint16)period_tick);
    }
    else
    {
        /* ignore set value */
    }
}


/**
 *  \brief Get the configured module frequency in kHz.
 *
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 *  \return Frequency, in kHz
 *  <table>
 *      <caption>Parameter Representation</caption>
 *          <tr>
 *              <th>Name</th>
 *              <th>Attribute</th>
 *              <th>Value</th>
 *          </tr>
 *          <tr>
 *              <td rowspan="6">getFrequency_kHz</td>
 *              <td>Fractional bits</td>
 *              <td>0</td>
 *          </tr>
 *          <tr>
 *              <td>Gain</td>
 *              <td>1000</td>
 *          </tr>
 *          <tr>
 *              <td>Offset</td>
 *              <td>0</td>
 *          </tr>
 *          <tr>
 *              <td>Accuracy</td>
 *              <td>-</td>
 *          </tr>
 *          <tr>
 *              <td>Range</td>
 *              <td>[0, 4294967295]</td>
 *          </tr>
 *          <tr>
 *              <td>Unit</td>
 *              <td>Hz</td>
 *          </tr>
 *  </table>
 *
 */
static inline uint32 Ifx_MHA_PatternGen_TLE987_getFrequency_kHz(Ifx_MHA_PatternGen_TLE987* self)
{
    /* Local variable for frequency*/
    uint32 frequencyTemp;

    /* Conversion of period ticks into frequency for center align mode */
    frequencyTemp = ((CCU6_T12_CLK * IFX_MHA_PATTERNGEN_TLE987_MHZ_TO_KHZ) / ((uint32)CCU6_T12_Period_Value_Get() +
                                                                              1));
    frequencyTemp = frequencyTemp / (2);

    return frequencyTemp;
}


/**
 *  \brief Returns the component ID
 *
 *
 *  \param [out] *componentID Variable to store the address of the component ID
 *
 */
void Ifx_MHA_PatternGen_TLE987_getID(const Ifx_ComponentID** componentID);

/**
 *  \brief Returns the component version
 *
 *
 *  \param [out] *componentVersion Variable to store the address of the component version
 *
 */
void Ifx_MHA_PatternGen_TLE987_getVersion(const Ifx_ComponentVersion** componentVersion);

/**
 *  \brief Clears all faults from the module.
 * The module will be set to enable or disable state in the next call to execute() depending on the enable setting.
 * New hardware fault will lead the module to fault state again.
 *
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 *  \note
 *  Inherited from Ifx_MHA_PatternGen
 */
static inline void Ifx_MHA_PatternGen_TLE987_clearFault(Ifx_MHA_PatternGen_TLE987* self)
{
    Ifx_MHA_PatternGen_clearFault(&(self->_Super_Ifx_MHA_PatternGen));
}


/**
 *  \brief Check if a clear fault request is pending.
 *
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *
 *  \return True if a clear fault request was made but still not processed by the module and False otherwise
 *  \note
 *  Inherited from Ifx_MHA_PatternGen
 */
static inline bool Ifx_MHA_PatternGen_TLE987_clearFaultIsPending(Ifx_MHA_PatternGen_TLE987* self)
{
    return Ifx_MHA_PatternGen_clearFaultIsPending(&(self->_Super_Ifx_MHA_PatternGen));
}


/**
 *  \brief This API enables or disables the module based on the input parameter enable.
 * If the input parameter is TRUE and no fault is detected, then the module will be enabled in the next call to
 * execute().
 * This API also set the HW-related members of the internal "self" data structure to the corresponding HW registers
 * according to the user manual.
 *
 *
 *  \param [inout] self Reference to structure that contains instance data members
 *  \param [in] enable Parameter of boolean type to enable or disable the module
 *
 *  \note
 *  Inherited from Ifx_MHA_PatternGen
 */
static inline void Ifx_MHA_PatternGen_TLE987_enable(Ifx_MHA_PatternGen_TLE987* self, bool enable)
{
    Ifx_MHA_PatternGen_enable(&(self->_Super_Ifx_MHA_PatternGen), enable);
}


#endif /*IFX_MHA_PATTERNGEN_TLE987_H*/
